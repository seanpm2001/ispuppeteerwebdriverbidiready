{
  "failing": [
    "Frame specs Frame Management should support lazy frames",
    "navigation Page.goto should work when page calls history API in beforeunload",
    "network Response.fromCache should work",
    "network Network Events Page.Events.RequestServedFromCache",
    "network Page.authenticate should work",
    "network Page.authenticate should allow disable authentication",
    "network Page.authenticate should not disable caching",
    "Page Page.Events.Popup should work",
    "Page Page.Events.Popup should work with noopener",
    "Page Page.Events.Popup should work with clicking target=_blank and without rel=opener",
    "Page Page.Events.Popup should work with clicking target=_blank and with rel=opener",
    "Page Page.Events.Popup should work with fake-clicking target=_blank and rel=noopener",
    "Page Page.Events.Popup should work with clicking target=_blank and rel=noopener",
    "Page Page.setCacheEnabled should enable or disable the cache based on the state passed",
    "Page Page.setCacheEnabled should stay disabled when toggling request interception on/off",
    "cooperative request interception Request.continue should redirect in a way non-observable to page",
    "request interception Request.continue should redirect in a way non-observable to page",
    "Touchscreen Touchscreen.prototype.tap should work",
    "Touchscreen Touchscreen.prototype.touchMove should work"
  ],
  "pending": [
    "Accessibility filtering children of leaf nodes elementHandle() should get an ElementHandle from a snapshot item",
    "navigation Page.waitForNavigation should work with history.replaceState()",
    "cooperative request interception Page.setRequestInterception should cooperatively respond by priority",
    "cooperative request interception Page.setRequestInterception should be able to fetch dataURL and fire dataURL requests",
    "cooperative request interception Page.setRequestInterception should work with encoded server - 2",
    "cooperative request interception Page.setRequestInterception should not cache if cache disabled",
    "cooperative request interception Page.setRequestInterception should cache if cache enabled",
    "cooperative request interception Page.setRequestInterception should load fonts if cache enabled",
    "cooperative request interception Request.respond should work",
    "cooperative request interception Request.respond should be able to access the response",
    "cooperative request interception Request.respond should work with status code 422",
    "cooperative request interception Request.respond should redirect",
    "cooperative request interception Request.respond should allow mocking binary responses",
    "cooperative request interception Request.respond should stringify intercepted request response headers",
    "request interception Page.setRequestInterception should be able to fetch dataURL and fire dataURL requests",
    "request interception Page.setRequestInterception should work with encoded server - 2",
    "request interception Page.setRequestInterception should not cache if cache disabled",
    "request interception Page.setRequestInterception should cache if cache enabled",
    "request interception Page.setRequestInterception should load fonts if cache enabled",
    "request interception Request.respond should work",
    "request interception Request.respond should work with status code 422",
    "request interception Request.respond should redirect",
    "request interception Request.respond should allow mocking multiple headers with same key",
    "request interception Request.respond should allow mocking binary responses",
    "request interception Request.respond should stringify intercepted request response headers",
    "request interception Request.respond should fail if the header value is invalid"
  ]
}