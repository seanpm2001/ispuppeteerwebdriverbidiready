{
  "failing": [
    "AriaQueryHandler queryOne (Chromium web test) should find by role \"heading\"",
    "BrowserContext should fire target events",
    "Target.createCDPSession should expose the underlying connection",
    "TargetManager should handle targets",
    "Cookie specs Page.setCookie should set secure same-site cookies from a frame",
    "Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
    "device request prompt does not crash",
    "Fixtures should close the browser when the node process closes",
    "ignoreHTTPSErrors Response.securityDetails should work",
    "ignoreHTTPSErrors Response.securityDetails should be |null| for non-secure requests",
    "ignoreHTTPSErrors Response.securityDetails Network redirects should report SecurityDetails",
    "input tests Page.waitForFileChooser should work when file input is attached to DOM",
    "input tests Page.waitForFileChooser should work when file input is not attached to DOM",
    "input tests Page.waitForFileChooser should respect timeout",
    "input tests Page.waitForFileChooser should respect default timeout when there is no custom timeout",
    "input tests Page.waitForFileChooser should prioritize exact timeout over default timeout",
    "input tests Page.waitForFileChooser should work with no timeout",
    "input tests Page.waitForFileChooser should return the same file chooser when there are many watchdogs simultaneously",
    "input tests FileChooser.accept should accept single file",
    "input tests FileChooser.accept should be able to read selected file",
    "input tests FileChooser.accept should be able to reset selected files with empty file list",
    "input tests FileChooser.accept should not accept multiple files for single-file input",
    "input tests FileChooser.accept should succeed even for non-existent files",
    "input tests FileChooser.accept should error on read of non-existent files",
    "input tests FileChooser.accept should fail when accepting file chooser twice",
    "input tests FileChooser.cancel should cancel dialog",
    "input tests FileChooser.cancel should fail when canceling file chooser twice",
    "input tests FileChooser.isMultiple should work for single file pick",
    "input tests FileChooser.isMultiple should work for \"multiple\"",
    "input tests FileChooser.isMultiple should work for \"webkitdirectory\"",
    "JSHandle Page.evaluateHandle should return the RemoteObject",
    "Launcher specs Puppeteer Puppeteer.connect should support ignoreHTTPSErrors option",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option in puppeteer.launch",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "navigation Page.goto should navigate to URL with hash and fire requests without hash",
    "navigation Page.goto should send referer",
    "navigation Frame.goto should return matching responses",
    "network Request.initiator should return the initiator",
    "network Request.postData should work",
    "network Request.postData should be |undefined| when there is no post data",
    "network Response.json should work",
    "network Response.timing returns timing information",
    "network Request.resourceType should work for document type",
    "network Request.resourceType should work for stylesheets",
    "network Response.remoteAddress should work",
    "network Response.remoteAddress should support redirects",
    "OOPIF should support OOP iframes becoming normal iframes again",
    "OOPIF should support OOP iframes getting detached",
    "OOPIF should support wait for navigation for transitions from local to OOPIF",
    "OOPIF should wait for inner OOPIFs",
    "Page Page.Events.Console should return remote objects",
    "Page Page.addScriptTag should throw when added with content to the CSP page",
    "request proxy in incognito browser context should proxy requests when configured at context level",
    "cooperative request interception Page.setRequestInterception should be abortable with custom error codes",
    "cooperative request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "cooperative request interception Request.resourceType should work for document type",
    "cooperative request interception Request.resourceType should work for stylesheets",
    "request interception Page.setRequestInterception should work with requests without networkId",
    "request interception Page.setRequestInterception should be abortable with custom error codes",
    "request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "request interception Request.resourceType should work for document type",
    "request interception Request.resourceType should work for stylesheets",
    "Workers can be closed"
  ],
  "pending": [
    "Accessibility get snapshots while the tree is re-calculated",
    "BFCache can navigate to a BFCached page",
    "BFCache can navigate to a BFCached page containing an OOPIF and a worker",
    "DevTools target.page() should return a DevTools page if custom isPageTarget is provided",
    "DevTools target.page() should return Page when calling asPage on DevTools target",
    "DevTools should open devtools when \"devtools: true\" option is given",
    "DevTools should expose DevTools as a page",
    "extensions background_page target type should be available",
    "extensions service_worker target type should be available",
    "extensions target.page() should return a background_page",
    "Page.pdf can print to PDF with accessible",
    "Page.pdf can print to PDF with outline",
    "Prerender can screencast",
    "Screencasts Page.screencast should work",
    "Screencasts Page.screencast should work concurrently",
    "Screencasts Page.screencast should validate options",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "Legacy Drag n' Drop should emit a dragIntercepted event when dragged",
    "Legacy Drag n' Drop should emit a dragEnter",
    "Legacy Drag n' Drop should emit a dragOver event",
    "Legacy Drag n' Drop can be dropped",
    "Legacy Drag n' Drop can be dragged and dropped with a single function",
    "headful tests HEADFUL headless should be able to read cookies written by headful",
    "Launcher specs Puppeteer Browser.disconnect should reject waitForSelector when browser closes",
    "Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
    "Launcher specs Puppeteer Puppeteer.launch should be able to launch Firefox",
    "Launcher specs Browser target events should work",
    "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
    "network Response.fromServiceWorker Response.fromServiceWorker",
    "network Request.postData should work with blobs",
    "network Response.text should work",
    "network Response.text should return uncompressed text",
    "network Response.text should throw when requesting body of redirected response",
    "network Response.text should wait until response completes",
    "network Response.buffer should work",
    "network Response.buffer should work with compression",
    "network Response.buffer should throw if the response does not have a body",
    "network Page.setBypassServiceWorker bypass for network",
    "OOPIF should keep track of a frames OOP state",
    "OOPIF should expose events within OOPIFs",
    "Page Page.Events.error should throw when page crashes",
    "Page Page.Events.Console should trigger correct Log",
    "Page Page.Events.Console should have location when fetch fails",
    "Page Page.metrics should get metrics from a page",
    "Page Page.metrics metrics event fired on console.timeStamp",
    "Screenshots Cdp should use scale for clip",
    "Screenshots Cdp should allow transparency",
    "Screenshots Cdp should render white background on jpeg file",
    "Screenshots Cdp should work in \"fromSurface: false\" mode",
    "Target should report when a service worker is created and destroyed",
    "Target should create a worker from a service worker",
    "Target should close a service worker",
    "Target should create a worker from a shared worker",
    "Target should close a shared worker",
    "Target should not report uninitialized pages",
    "Target should have an opener"
  ]
}