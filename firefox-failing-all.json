{
  "failing": [
    "AriaQueryHandler queryOne (Chromium web test) should find by role \"heading\"",
    "Autofill ElementHandle.autofill should fill out a credit card",
    "BrowserContext should fire target events",
    "BrowserContext should work across sessions",
    "Page.click should click with disabled javascript",
    "Page.click should scroll and click with disabled javascript",
    "Coverage specs JSCoverage should ignore pptr internal scripts if reportAnonymousScripts is true",
    "Drag n' Drop should drop",
    "Drag n' Drop should drop using mouse",
    "Drag n' Drop should drag and drop",
    "Emulation Page.viewport should support touch emulation",
    "Emulation Page.viewport should be detectable by Modernizr",
    "Emulation Page.viewport should detect touch when applying viewport with touches",
    "Emulation Page.viewport should support landscape emulation",
    "Emulation Page.emulateMediaType should work",
    "Emulation Page.emulateMediaFeatures should work",
    "Emulation Page.emulateTimezone should work",
    "Emulation Page.emulateTimezone should throw for invalid timezone IDs",
    "Emulation Page.emulateVisionDeficiency should work",
    "Emulation Page.emulateNetworkConditions should change navigator.connection.effectiveType",
    "Emulation Page.emulateCPUThrottling should change the CPU throttling rate successfully",
    "Frame specs Frame Management should support lazy frames",
    "ignoreHTTPSErrors Response.securityDetails should work",
    "ignoreHTTPSErrors Response.securityDetails should be |null| for non-secure requests",
    "ignoreHTTPSErrors Response.securityDetails Network redirects should report SecurityDetails",
    "input tests Page.waitForFileChooser should work when file input is attached to DOM",
    "input tests Page.waitForFileChooser should work when file input is not attached to DOM",
    "input tests Page.waitForFileChooser should respect timeout",
    "input tests Page.waitForFileChooser should respect default timeout when there is no custom timeout",
    "input tests Page.waitForFileChooser should prioritize exact timeout over default timeout",
    "input tests Page.waitForFileChooser should work with no timeout",
    "input tests Page.waitForFileChooser should return the same file chooser when there are many watchdogs simultaneously",
    "input tests FileChooser.accept should accept single file",
    "input tests FileChooser.accept should be able to read selected file",
    "input tests FileChooser.accept should be able to reset selected files with empty file list",
    "input tests FileChooser.accept should not accept multiple files for single-file input",
    "input tests FileChooser.accept should succeed even for non-existent files",
    "input tests FileChooser.accept should error on read of non-existent files",
    "input tests FileChooser.accept should fail when accepting file chooser twice",
    "input tests FileChooser.cancel should cancel dialog",
    "input tests FileChooser.cancel should fail when canceling file chooser twice",
    "input tests FileChooser.isMultiple should work for single file pick",
    "input tests FileChooser.isMultiple should work for \"multiple\"",
    "input tests FileChooser.isMultiple should work for \"webkitdirectory\"",
    "JSHandle Page.evaluateHandle should return the RemoteObject",
    "Launcher specs Puppeteer Browser.disconnect should reject navigation when browser closes",
    "Launcher specs Puppeteer Browser.close should terminate network waiters",
    "Launcher specs Puppeteer Puppeteer.connect should be able to connect multiple times to the same browser",
    "Launcher specs Puppeteer Puppeteer.connect should be able to close remote browser",
    "Launcher specs Puppeteer Puppeteer.connect should be able to connect to a browser with no page targets",
    "Launcher specs Puppeteer Puppeteer.connect should support ignoreHTTPSErrors option",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option in puppeteer.launch",
    "Launcher specs Puppeteer Puppeteer.connect should support targetFilter option",
    "Launcher specs Puppeteer Puppeteer.connect should be able to reconnect to a disconnected browser",
    "Launcher specs Puppeteer Puppeteer.connect should be able to connect to the same page simultaneously",
    "Launcher specs Browser target events should work",
    "Launcher specs Browser.Events.disconnected should be emitted when: browser gets closed, disconnected or underlying websocket gets closed",
    "navigation Page.goto should work when page calls history API in beforeunload",
    "navigation Page.goto should navigate to URL with hash and fire requests without hash",
    "navigation Page.goto should send referer",
    "navigation Frame.goto should return matching responses",
    "network Request.initiator should return the initiator",
    "network Response.fromCache should work",
    "network Request.postData should work",
    "network Request.postData should be |undefined| when there is no post data",
    "network Response.json should work",
    "network Response.timing returns timing information",
    "network Network Events Page.Events.RequestServedFromCache",
    "network Page.authenticate should work",
    "network Page.authenticate should allow disable authentication",
    "network Page.authenticate should not disable caching",
    "network Request.resourceType should work for document type",
    "network Request.resourceType should work for stylesheets",
    "network Response.remoteAddress should work",
    "network Response.remoteAddress should support redirects",
    "OOPIF should support OOP iframes becoming normal iframes again",
    "OOPIF should support OOP iframes getting detached",
    "OOPIF should support wait for navigation for transitions from local to OOPIF",
    "OOPIF should detect existing OOPIFs when Puppeteer connects to an existing page",
    "OOPIF should support lazy OOP frames",
    "OOPIF should report google.com frame",
    "OOPIF should expose events within OOPIFs",
    "Page Page.Events.Popup should work",
    "Page Page.Events.Popup should work with noopener",
    "Page Page.Events.Popup should work with clicking target=_blank and without rel=opener",
    "Page Page.Events.Popup should work with clicking target=_blank and with rel=opener",
    "Page Page.Events.Popup should work with fake-clicking target=_blank and rel=noopener",
    "Page Page.Events.Popup should work with clicking target=_blank and rel=noopener",
    "Page Page.setGeolocation should work",
    "Page Page.setOfflineMode should work",
    "Page Page.setOfflineMode should emulate navigator.onLine",
    "Page Page.Events.Console should work for different console API calls with timing functions",
    "Page Page.setUserAgent should work with additional userAgentMetdata",
    "Page Page.setBypassCSP should bypass CSP meta tag",
    "Page Page.setBypassCSP should bypass CSP header",
    "Page Page.setBypassCSP should bypass after cross-process navigation",
    "Page Page.setBypassCSP should bypass CSP in iframes as well",
    "Page Page.addScriptTag should throw when added with content to the CSP page",
    "Page Page.setJavaScriptEnabled should work",
    "Page Page.setCacheEnabled should enable or disable the cache based on the state passed",
    "Page Page.setCacheEnabled should stay disabled when toggling request interception on/off",
    "cooperative request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "cooperative request interception Request.continue should redirect in a way non-observable to page",
    "cooperative request interception Request.resourceType should work for document type",
    "cooperative request interception Request.resourceType should work for stylesheets",
    "request interception Page.setRequestInterception should navigate to URL with hash and fire requests without hash",
    "request interception Request.continue should redirect in a way non-observable to page",
    "request interception Request.resourceType should work for document type",
    "request interception Request.resourceType should work for stylesheets",
    "Touchscreen Touchscreen.prototype.tap should work",
    "Touchscreen Touchscreen.prototype.touchMove should work",
    "waittask specs Frame.waitForFunction should work with strict CSP policy"
  ],
  "pending": [
    "Accessibility should work",
    "Accessibility should report uninteresting nodes",
    "Accessibility get snapshots while the tree is re-calculated",
    "Accessibility roledescription",
    "Accessibility orientation",
    "Accessibility autocomplete",
    "Accessibility multiselectable",
    "Accessibility keyshortcuts",
    "Accessibility filtering children of leaf nodes should not report text nodes inside controls",
    "Accessibility filtering children of leaf nodes rich text editable fields should have children",
    "Accessibility filtering children of leaf nodes rich text editable fields with role should have children",
    "Accessibility filtering children of leaf nodes non editable textbox with role and tabIndex and label should not have children",
    "Accessibility filtering children of leaf nodes checkbox with and tabIndex and label should not have children",
    "Accessibility filtering children of leaf nodes checkbox without label should not have children",
    "Accessibility filtering children of leaf nodes plaintext contenteditable plain text field with role should not have children",
    "Accessibility filtering children of leaf nodes root option should work a button",
    "Accessibility filtering children of leaf nodes root option should work an input",
    "Accessibility filtering children of leaf nodes root option should work a menu",
    "Accessibility filtering children of leaf nodes root option should return null when the element is no longer in DOM",
    "Accessibility filtering children of leaf nodes root option should support the interestingOnly option",
    "Accessibility filtering children of leaf nodes elementHandle() should get an ElementHandle from a snapshot item",
    "Browser specs Browser.process should not return child_process for remote browser",
    "Browser specs Browser.isConnected should set the browser connected state",
    "Chromium-Specific Launcher tests Puppeteer.launch |browserURL| option should be able to connect using browserUrl, with and without trailing slash",
    "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should support the pipe option",
    "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should support the pipe argument",
    "Chromium-Specific Launcher tests Puppeteer.launch |pipe| option should fire \"disconnected\" when closing with pipe",
    "Chromium-Specific Page Tests Page.setRequestInterception should work with intervention headers",
    "Cookie specs Page.setCookie should default to setting secure cookie for HTTPS websites",
    "Cookie specs Page.setCookie should set secure same-site cookies from a frame",
    "Cookie specs Page.deleteCookie should delete cookie for specified URL regardless of the current page",
    "Coverage specs JSCoverage should work",
    "Coverage specs JSCoverage should report sourceURLs",
    "Coverage specs JSCoverage should ignore eval() scripts by default",
    "Coverage specs JSCoverage should not ignore eval() scripts if reportAnonymousScripts is true",
    "Coverage specs JSCoverage should report multiple scripts",
    "Coverage specs JSCoverage should report right ranges",
    "Coverage specs JSCoverage should report right ranges for \"per function\" scope",
    "Coverage specs JSCoverage should report scripts that have no coverage",
    "Coverage specs JSCoverage should work with conditionals",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "Coverage specs JSCoverage should not hang when there is a debugger statement",
    "Coverage specs JSCoverage resetOnNavigation should report scripts across navigations when disabled",
    "Coverage specs JSCoverage resetOnNavigation should NOT report scripts across navigations when enabled",
    "Coverage specs JSCoverage includeRawScriptCoverage should not include rawScriptCoverage field when disabled",
    "Coverage specs JSCoverage includeRawScriptCoverage should include rawScriptCoverage field when enabled",
    "Coverage specs CSSCoverage should work",
    "Coverage specs CSSCoverage should report sourceURLs",
    "Coverage specs CSSCoverage should report multiple stylesheets",
    "Coverage specs CSSCoverage should report stylesheets that have no coverage",
    "Coverage specs CSSCoverage should work with media queries",
    "Coverage specs CSSCoverage should work with complicated usecases",
    "Coverage specs CSSCoverage should work with empty stylesheets",
    "Coverage specs CSSCoverage should ignore injected stylesheets",
    "Coverage specs CSSCoverage should work with a recently loaded stylesheet",
    "Coverage specs CSSCoverage resetOnNavigation should report stylesheets across navigations",
    "Coverage specs CSSCoverage resetOnNavigation should NOT report scripts across navigations",
    "device request prompt does not crash",
    "Legacy Drag n' Drop should emit a dragIntercepted event when dragged",
    "Legacy Drag n' Drop should emit a dragEnter",
    "Legacy Drag n' Drop should emit a dragOver event",
    "Legacy Drag n' Drop can be dropped",
    "Legacy Drag n' Drop can be dragged and dropped with a single function",
    "Fixtures dumpio option should work with pipe option",
    "Fixtures should close the browser when the node process closes",
    "headful tests HEADFUL headless should be able to read cookies written by headful",
    "Emulate idle state changing idle state emulation causes change of the IdleDetector state",
    "Launcher specs Puppeteer Browser.disconnect should reject waitForSelector when browser closes",
    "Launcher specs Puppeteer Puppeteer.launch should work with no default arguments",
    "Launcher specs Puppeteer Puppeteer.launch should be able to launch Chrome",
    "Launcher specs Puppeteer Puppeteer.executablePath returns executablePath for channel",
    "navigation Page.waitForNavigation should work with history.replaceState()",
    "network Response.fromServiceWorker Response.fromServiceWorker",
    "network Request.postData should work with blobs",
    "network Response.text should work",
    "network Response.text should return uncompressed text",
    "network Response.text should throw when requesting body of redirected response",
    "network Response.text should wait until response completes",
    "network Response.buffer should work",
    "network Response.buffer should work with compression",
    "network Response.buffer should throw if the response does not have a body",
    "network Page.setBypassServiceWorker bypass for network",
    "OOPIF should wait for inner OOPIFs",
    "OOPIF should evaluate on a page with a PDF viewer",
    "Page Page.Events.error should throw when page crashes",
    "Page Page.Events.Console should return remote objects",
    "Page Page.Events.Console should trigger correct Log",
    "Page Page.Events.Console should have location when fetch fails",
    "Page Page.metrics should get metrics from a page",
    "Page Page.metrics metrics event fired on console.timeStamp",
    "Page Page.addStyleTag should throw when added with content to the CSP page",
    "Page Page.pdf should respect timeout",
    "request proxy should proxy requests when configured",
    "request proxy should respect proxy bypass list",
    "request proxy in incognito browser context should proxy requests when configured at browser level",
    "request proxy in incognito browser context should respect proxy bypass list when configured at browser level",
    "request proxy in incognito browser context should proxy requests when configured at context level",
    "request proxy in incognito browser context should respect proxy bypass list when configured at context level",
    "cooperative request interception Page.setRequestInterception should cooperatively respond by priority",
    "cooperative request interception Page.setRequestInterception should be abortable with custom error codes",
    "cooperative request interception Page.setRequestInterception should be able to fetch dataURL and fire dataURL requests",
    "cooperative request interception Page.setRequestInterception should work with encoded server - 2",
    "cooperative request interception Page.setRequestInterception should work with file URLs",
    "cooperative request interception Page.setRequestInterception should not cache if cache disabled",
    "cooperative request interception Page.setRequestInterception should cache if cache enabled",
    "cooperative request interception Page.setRequestInterception should load fonts if cache enabled",
    "cooperative request interception Request.respond should work",
    "cooperative request interception Request.respond should be able to access the response",
    "cooperative request interception Request.respond should work with status code 422",
    "cooperative request interception Request.respond should redirect",
    "cooperative request interception Request.respond should allow mocking binary responses",
    "cooperative request interception Request.respond should stringify intercepted request response headers",
    "request interception Page.setRequestInterception should work with requests without networkId",
    "request interception Page.setRequestInterception should be abortable with custom error codes",
    "request interception Page.setRequestInterception should be able to fetch dataURL and fire dataURL requests",
    "request interception Page.setRequestInterception should work with encoded server - 2",
    "request interception Page.setRequestInterception should work with file URLs",
    "request interception Page.setRequestInterception should not cache if cache disabled",
    "request interception Page.setRequestInterception should cache if cache enabled",
    "request interception Page.setRequestInterception should load fonts if cache enabled",
    "request interception Request.respond should work",
    "request interception Request.respond should work with status code 422",
    "request interception Request.respond should redirect",
    "request interception Request.respond should allow mocking multiple headers with same key",
    "request interception Request.respond should allow mocking binary responses",
    "request interception Request.respond should stringify intercepted request response headers",
    "request interception Request.respond should fail if the header value is invalid",
    "Screenshots Cdp should use scale for clip",
    "Screenshots Cdp should allow transparency",
    "Screenshots Cdp should render white background on jpeg file",
    "Screenshots Cdp should work in \"fromSurface: false\" mode",
    "Target should report when a service worker is created and destroyed",
    "Target should create a worker from a service worker",
    "Target should close a service worker",
    "Target should create a worker from a shared worker",
    "Target should close a shared worker",
    "Target should not report uninitialized pages",
    "Target should have an opener",
    "Tracing should output a trace",
    "Tracing should run with custom categories if provided",
    "Tracing should run with default categories",
    "Tracing should throw if tracing on two pages",
    "Tracing should return a buffer",
    "Tracing should work without options",
    "Tracing should return undefined in case of Buffer error",
    "Tracing should support a buffer without a path",
    "Tracing should properly fail if readProtocolStream errors out",
    "Workers Page.workers",
    "Workers should emit created and destroyed events",
    "Workers should report console logs",
    "Workers should work with console logs",
    "Workers should have an execution context",
    "Workers can be closed"
  ]
}